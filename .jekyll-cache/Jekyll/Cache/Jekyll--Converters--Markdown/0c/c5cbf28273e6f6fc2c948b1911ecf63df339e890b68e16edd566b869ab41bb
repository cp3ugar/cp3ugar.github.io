I"f<h1 id="意图">意图</h1>

<p><strong>单例模式</strong>是一种创建型设计模式，让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。</p>

<p><img src="../../assets/img/image-20210527153510545.png" alt="image-20210527153510545" /></p>

<h1 id="问题">问题</h1>

<p>单例模式同时解决了两个问题，所以违反了<u>单一职责原则</u>：</p>

<ol>
  <li>
    <p><strong>保证一个类只有一个实例。</strong>为什么会有人想要控制一个类所拥有的实例数量？最常见的原因是控制某些共享资源的访问权限</p>

    <p>它的运作方式是这样的：如果你创建了一个对象，同时过一会儿后你决定再创建一个新对象，此时你会获得之前已创建的对象，而不是一个新对象。</p>

    <p>注意，普通构造函数无法实现上述行为，因为构造函数的设计决定了它<strong>必须</strong>总是返回一个新对象。</p>

    <p><img src="../../assets/img/image-20210527153815627.png" alt="image-20210527153815627" /></p>
  </li>
  <li>
    <p><strong>为该实例提供一个全局访问节点。</strong>还记得你用过的那些存储重要对象的全局变量吗？他们在使用上十分方便，但同时也非常不安全，因为任何代码都有可能覆盖掉那些变量的内容，从而引发程序崩溃</p>

    <p>和全局变量一样，单例模式也允许在程序的任何地方访问特定对象。但是它可以保护该实例不被其他代码覆盖。</p>

    <p>还有一点：你不会希望解决同一个问题的代码分散在程序各处的。因此更好的方式是将其放在同一个类中，特别是当其他代码已经依赖这个类时更应该如此。</p>
  </li>
</ol>

<p>如今，单例模式已经变得非常流行，以至于人们会将只解决上文描述中任意一个问题的东西称为单例。</p>

<h1 id="解决方案">解决方案</h1>

<p>所有单例的实现都包含以下两个相同的步骤：</p>

<ul>
  <li>将默认构造函数设为私有，防止其他对象使用单例类的<code class="language-plaintext highlighter-rouge">new</code>运算符</li>
  <li>新建一个静态构造方法作为构造函数。该函数会“偷偷”调用私有构造函数来创建对象，并将其保存在一个静态成员变量中。此后所有对于该函数的调用都将返回这一缓存对象</li>
</ul>

<p>如果你的代码能够访问单例类，那它就能调用单例类的静态方法。无论何时调用该方法，它总会返回相同的对象。</p>

<h3 id="真实世界类比">真实世界类比</h3>

<p>政府是单例模式的一个很好的示例。一个国家只有一个官方政府。不管组成政府的每个人的身份是什么，“某政府”这一称谓总是鉴别那些掌权者的全局访问节点。</p>

<h1 id="单例模式结构">单例模式结构</h1>

<p><img src="../../assets/img/image-20210527154635056.png" alt="image-20210527154635056" /></p>

<h1 id="单例模式适合应用场景">单例模式适合应用场景</h1>

<h3 id="如果程序中的某个类对于所有客户端只有一个可用的实例可以使用单例模式">如果程序中的某个类对于所有客户端只有一个可用的实例，可以使用单例模式。</h3>

<p>单例模式禁止通过特殊构造方法以外的任何方式来创建自身类的对象。该方法可以创建一个新对象，但如果该对象已经被创建，则返回已有的对象。</p>

<h3 id="如果你需要更加严格地控制全局变量可以使用单例模式">如果你需要更加严格地控制全局变量，可以使用单例模式。</h3>

<p>单例模式与全局变量不同，它保证类只存在一个实例。除了单例类自己以外，无法通过任何方式替换缓存的实例。</p>

<p>请注意，你可以随时调整限制并设定生成单例实例的数量，只需修改<code class="language-plaintext highlighter-rouge">获取实例</code>方法，即<code class="language-plaintext highlighter-rouge">getInstance</code>中的代码即可实现。</p>

<h1 id="实现方式">实现方式</h1>

<ol>
  <li>在类中添加一个私有静态成员变量用于保存单例实例</li>
  <li>声明一个公有静态构建方法用于获取单例实例</li>
  <li>在静态方法中实现“延迟初始化”。该方法会在首次被调用时创建一个新对象，并将其存储在静态成员变量中。此后该方法每次调用时都返回该实例</li>
  <li>将类的构造函数设为私有。类的静态方法仍能调用构造函数，但是其他对象不能调用</li>
  <li>检查客户端代码，将对单例的构造函数的调用替换为对静态构建方法的调用</li>
</ol>

<h1 id="单例模式优缺点">单例模式优缺点</h1>

<p>优点：</p>

<ul>
  <li>可以保证一个类只有一个实例</li>
  <li>获得了一个指向该实例的全局访问节点</li>
  <li>仅在首次请求实例对象时对其进行初始化</li>
</ul>

<p>缺点：</p>

<ul>
  <li>违反了<strong>单一职责原则</strong>。该模式同时解决了两个问题</li>
  <li>单例模式可能掩盖不良设计，比如程序各组件之间相互了解过多等</li>
  <li>该模式在多线程环境下需要进行特殊处理，避免多个线程多次创建单例对象</li>
  <li>单例的客户端代码单元测试可能会比较困难，因为许多测试框架以基于继承的方式创建模拟对象。由于单例模式的构造函数是私有的，而且觉得绝大部分语言无法重写静态方法，所有你需要想出仔细考虑单例模式的方法。要么干脆不编写测试代码，或者不使用单例模式</li>
</ul>

<h1 id="与其他模式的关系">与其他模式的关系</h1>

<ul>
  <li><strong><u>外观模式</u></strong>类通常可以转换为<strong><u>单例模式</u></strong>类，因为在大部分情况下一个外观对象就足够了。</li>
  <li>如果你能将对象的所有共享状态简化为一个享元对象，那么<strong><u>享元模式</u></strong>和<strong><u>单例</u></strong>类似了。但是这两个模式有两个根本性的不同：
    <ol>
      <li>只会有一个单例实体，但是享元类可以有多个实体，各实体的内在状态也可以不同</li>
      <li>单例对象可以是可变的，享元对象是不可变的</li>
    </ol>
  </li>
  <li><strong><u>抽象工厂</u></strong>、<strong><u>生成器</u></strong>和<strong><u>原型</u></strong>都可以用<strong><u>单例模式</u></strong>来实现。</li>
</ul>

<blockquote>
  <p><a href="https://refactoringguru.cn/design-patterns/singleton">摘自REFACTORING GURU</a></p>
</blockquote>

:ET