I"&<h1 id="deploying-your-application">Deploying your application</h1>

<h3 id="a-java-program-is-a-bunch-of-classes-thats-the-output-of-your-development-the-real-question-is-what-to-do-with-those-classes-when-youre-done">A Java program is a bunch of classes. That‚Äôs the output of your development. The real question is what to do with those classes when you‚Äôre done.</h3>

<p><img src="../../assets/img/image-20210420133957122.png" alt="image-20210420133957122" /></p>

<ol>
  <li>
    <p><strong>Local</strong></p>

    <p>The entire application runs on the end-user‚Äôs computer,as a stand-alone,probably GUI,program,deployed as an executable JAR</p>
  </li>
  <li>
    <p><strong>Combination of local and remote</strong></p>

    <p>The application is distributed with a client portion running on the user‚Äôs local system,connected to a server where other parts of the application are running</p>
  </li>
  <li>
    <p><strong>Remote</strong></p>

    <p>The entire Java application runs on a server system,with the client accessing the system through some ono-Java means,probably a web brower</p>
  </li>
</ol>

<h1 id="separate-souece-code-and-class-file">Separate souece code and class file</h1>

<p><strong><em>The key is a combination of directory structure organization and the -d compiler option.</em></strong></p>

<h3 id="compiling-with-the--d-directory-flag">Compiling with the -d (directory) flag</h3>

<p><img src="../../assets/img/image-20210420133927883.png" alt="image-20210420133927883" /></p>

<p><img src="../../assets/img/image-20210420133940756.png" alt="image-20210420133940756" /></p>

<h1 id="put-your-java-in-a-jar">Put your Java in a <u>JAR</u></h1>

<p>A <strong>JAR</strong> file is a <strong>J</strong>ava <strong>AR</strong>chive.</p>

<h3 id="making-an-executable-jar">Making an executable JAR</h3>

<ol>
  <li>
    <p><strong>Make sure all of your class files are in the <u>classes</u> directory</strong></p>

    <p><img src="../../assets/img/image-20210420134444626.png" alt="image-20210420134444626" /></p>
  </li>
  <li>
    <p><strong>Create a manifest.txt file that states which class has the main() method</strong></p>

    <p><img src="../../assets/img/image-20210420134517378.png" alt="image-20210420134517378" /></p>
  </li>
  <li>
    <p><strong>Run the jar tool to create a JAR file that contains everything in the classes directory,plus the mainfest</strong></p>

    <p><img src="../../assets/img/image-20210420134604417.png" alt="image-20210420134604417" /></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd MiniProject/classes
jar -cvmf manifest.txt app.jar *.class
OR
jar -cvmf manifest.txt app.jar MyApp.class
</code></pre></div>    </div>
  </li>
</ol>

<h1 id="running-executing-the-jar">Running (executing) the JAR</h1>

<p><img src="../../assets/img/image-20210420140223115.png" alt="image-20210420140223115" /></p>

<h1 id="put-your-classes-in-packages">Put your classes in packages</h1>

<p><img src="../../assets/img/image-20210420141053685.png" alt="image-20210420141053685" /></p>

<h3 id="packages-prevent-class-name-conflicts">Packages prevent class name conflicts</h3>

<p><strong>Packages can prevent name conflicts,but only if you choose a packeage name that‚Äôs guaranteed to be unique. The best way to do that is to preface your packages with your reverse domain name.</strong></p>

<p><img src="../../assets/img/image-20210420141518651.png" alt="image-20210420141518651" /></p>

<h3 id="to-put-your-class-in-a-package">To put your class in a package:</h3>

<ol>
  <li>
    <p><strong>Choose a package name</strong></p>
  </li>
  <li>
    <p><strong>Put a package statement in your class</strong></p>

    <p>It must be the first statement in the source code file,above any import statements. There can be only one package statement per souece code file,so <strong>all classes in a source file must be in the same package</strong>. That includes inner classes,of course.</p>

    <p><img src="../../assets/img/image-20210420141718754.png" alt="image-20210420141718754" /></p>
  </li>
  <li>
    <p><strong>Set up a matching directory structure</strong></p>
  </li>
</ol>

<p>You <u>must</u> put a class into a directory structure that matches the package hierarchy.</p>

<p><img src="../../assets/img/image-20210420142140609.png" alt="image-20210420142140609" /></p>

<h1 id="compiling-and-running-with-packages">Compiling and running with packages</h1>

<h3 id="compiling-with-the--ddirectory-flag">Compiling with the -d(directory) flag</h3>

<p><img src="../../assets/img/image-20210420142342082.png" alt="image-20210420142342082" /></p>

<p><img src="../../assets/img/image-20210420142512641.png" alt="image-20210420142512641" /></p>

<h3 id="running-your-code">Running your code</h3>

<p><img src="../../assets/img/image-20210420142531097.png" alt="image-20210420142531097" /></p>

<h3 id="the--d-flag-tells-the-compilerput-the-class-into-its-package-directory-structureusing-the-class-specified-after-the--d-has-the-root-directorybutif-the-directories-arent-therecreate-them-first-and-then-put-the-class-in-the-right-place">The -d flag tells the compiler,‚ÄùPut the class into its package directory structure,using the class specified after the -d has the root directory.But‚Ä¶if the directories aren‚Äôt there,create them first and then put the class in the right place!‚Äù</h3>

<h1 id="making-an-executable-jar-with-packages">Making an executable JAR with packages</h1>

<ol>
  <li><strong>Make sure all of your class files are within the correct package structure under the classes directory</strong></li>
  <li><strong>Create a manifest.txt file that states which class has the main() method,adn be sure to use the fully-qualified class name!</strong></li>
  <li><strong>Run the jar tool to create a JAR file taht contains the package directories plus the manifest</strong></li>
</ol>

<h1 id="so-where-did-the-manifest-file-go">So where did the manifest file go?</h1>

<ul>
  <li>
    <p><strong>List the contents of a JAR</strong></p>

    <p><img src="../../assets/img/image-20210420150204585.png" alt="image-20210420150204585" /></p>
  </li>
  <li>
    <p><strong>Extract the contents of a JAR</strong></p>

    <p><img src="../../assets/img/image-20210420155642775.png" alt="image-20210420155642775" /></p>
  </li>
</ul>

<p><img src="../../assets/img/image-20210420155747247.png" alt="image-20210420155747247" /></p>

<h1 id="java-web-start">Java Web Start</h1>

<h3 id="end-users-launch-a-java-web-start-app-by-clicking-in-a-link-in-a-web-page-but-once-the-app-downloadsit-runs-outside-the-browerjust-like-any-other-stand-alone-java-application-in-facta-java-web-start-app-is-just-an-executable-jar-thats-distributed-over-the-web">End-users launch a Java Web Start app by clicking in a link in a web page. But once the app downloads,it runs outside the brower,just like any other stand-alone Java application. In fact,a Java Web Start app is just an executable JAR that‚Äôs distributed over the web.</h3>

<h1 id="how-java-web-start-works">How Java Web Start works</h1>

<ol>
  <li>
    <p>The client clicks on a Web page link to your JWS application</p>

    <p><img src="../../assets/img/image-20210420160714334.png" alt="image-20210420160714334" /></p>
  </li>
  <li>
    <p>The Web Server gets the request and sends back a .jnlp file</p>

    <p><img src="../../assets/img/image-20210420160823133.png" alt="image-20210420160823133" /></p>
  </li>
  <li>
    <p>Java Web Start is started up by the brower. The JWS helper app reads the .jnlp file,and asks the server for the MyApp.jar file</p>

    <p><img src="../../assets/img/image-20210420160930461.png" alt="image-20210420160930461" /></p>
  </li>
  <li>
    <p>The Web server ‚Äòserves‚Äô up the requested .jar file</p>

    <p><img src="../../assets/img/image-20210420160955013.png" alt="image-20210420160955013" /></p>
  </li>
  <li>
    <p>Java Web Start gets the JAR and starts the application by calling the specified main() method</p>

    <p><img src="../../assets/img/image-20210420161255893.png" alt="image-20210420161255893" /></p>
  </li>
</ol>

<h1 id="the-jnlpjava-network-launch-protocol-file">The .jnlp(Java Network Launch Protocol) file</h1>

<p>A .jnlp file is a simple XML document that has serveral different things you can put in,but as a minimum,it should look like this:</p>

<p><img src="../../assets/img/image-20210420162001312.png" alt="image-20210420162001312" /></p>

<h1 id="step-for-making-and-deploying-a-java-web-start-app">Step for making and deploying a Java Web Start app</h1>

<ol>
  <li>
    <p><strong>Make an executable JAR for your application</strong></p>

    <p><img src="../../assets/img/image-20210420162344316.png" alt="image-20210420162344316" /></p>
  </li>
  <li>
    <p><strong>Write a .jnlp file</strong></p>

    <p><img src="../../assets/img/image-20210420162354165.png" alt="image-20210420162354165" /></p>
  </li>
  <li>
    <p><strong>Place your JAR and .jnlp files on your Web server</strong></p>

    <p><img src="../../assets/img/image-20210420162422667.png" alt="image-20210420162422667" /></p>
  </li>
  <li>
    <p><strong>Add a new mime type to your Web server</strong></p>

    <p>This causes the server to send the .jnlp file with the correct header,so that when the brower receives the .jnlp file it knows what it is and knows to start the JWS helper app</p>

    <p><img src="../../assets/img/image-20210420162558923.png" alt="image-20210420162558923" /></p>
  </li>
  <li>
    <p><strong>Create a Web page with a link to your .jnlp file</strong></p>

    <p><img src="../../assets/img/image-20210420162634501.png" alt="image-20210420162634501" /></p>
  </li>
</ol>

:ET